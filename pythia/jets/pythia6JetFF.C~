void pythia6JetFF(Int_t nEvent = 50, Char_t const *foutname = "pythiaJets.root", Float_t pthard_min=10, Float_t pthard_max=100, Float_t e_cms = 7000) {

  // example macro for on-the-fly generation of PYTHIA6 events
  // and analysis with new reader interface and FastJet
  // M. van Leeuwen

  gSystem->Load("libANALYSIS");
  gSystem->Load("libANALYSISalice");
  gSystem->Load("libCGAL");
  gSystem->Load("libfastjet");
  gSystem->Load("libsiscone");
  gSystem->Load("libSISConePlugin");
  gSystem->Load("libJETAN");
  gSystem->Load("libFASTJETAN");

  gSystem->Load("libpythia6.so");
  gSystem->Load("libEGPythia6.so");
  gSystem->Load("libAliPythia6.so");


  const Float_t jetR = 0.4;
  const Float_t eta_jet_max = 0.5;

  const Int_t nPtJetBins = 100;
  const Float_t minPtJet = 0;
  const Float_t maxPtJet = 100;
  TFile *fout = new TFile(foutname,"RECREATE");

  TH1F *hNEvent = new TH1F("hNEvent","number of events; N",1,0,1);
  TProfile *hXSec = new TProfile("hXSec","cross section; #sigma",1,0,1);
 
  TH1F *hPtPion = new TH1F("hPtPion","charged pion pt spectrum;p_{T} (GeV)",nPtJetBins,minPtJet,maxPtJet);
  TH1F *hPtD = new TH1F("hPtD","D^{0} pt spectrum;p_{T} (GeV)",nPtJetBins,minPtJet,maxPtJet);

  TH3F *hJetPtEtaPhi = new TH3F("hJetPtEtaPhi","hJetPtEtaPhi;p_{T,jet} (GeV);#eta;#phi",nPtJetBins,minPtJet,maxPtJet,20,-eta_jet_max,eta_jet_max,32,0,2*TMath::Pi());
  TH2F *hPtJetPtCh = new TH2F("hPtJetPtCh","hPtJetPtCh;p_{T,jet} (GeV);p_{T,part} (GeV)",nPtJetBins,minPtJet,maxPtJet,nPtJetBins,minPtJet,maxPtJet);
  TH2F *hPtJetPtPion = new TH2F("hPtJetPtPion","hPtJetPtPion;p_{T,jet} (GeV);p_{T,part} (GeV)",nPtJetBins,minPtJet,maxPtJet,nPtJetBins,minPtJet,maxPtJet);
  TH2F *hPtJetPtKaon = new TH2F("hPtJetPtKaon","hPtJetPtKaon;p_{T,jet} (GeV);p_{T,part} (GeV)",nPtJetBins,minPtJet,maxPtJet,nPtJetBins,minPtJet,maxPtJet);
  TH2F *hPtJetPtProton = new TH2F("hPtJetPtProton","hPtJetPtProton;p_{T,jet} (GeV);p_{T,part} (GeV)",nPtJetBins,minPtJet,maxPtJet,nPtJetBins,minPtJet,maxPtJet);
  TH2F *hPtJetPtD = new TH2F("hPtJetPtD","hPtJetPtD;p_{T,jet} (GeV);p_{T,part} (GeV)",nPtJetBins,minPtJet,maxPtJet,nPtJetBins,minPtJet,maxPtJet);

  AliPDG::AddParticlesToPdgDataBase(); // to add some PDF codes to TDatabasePDG

  // Create random number generator and set seed
  AliPythiaRndm::SetPythiaRandom(new TRandom3());
  AliPythiaRndm::GetPythiaRandom()->SetSeed(clock()+gSystem->GetPid());

  AliPythia6 *pythia=AliPythia6::Instance();

  pythia->SetCKIN(3,pthard_min);   // minimum hard pt
  pythia->SetCKIN(4,pthard_max);  // maximum hard pt

  pythia->SetMDCY(pythia->Pycomp(111),1,0);  // switch off pi0 decay

  pythia->Initialize("CMS","p","p",e_cms);


  AliFastJetHeaderV1 *header = new AliFastJetHeaderV1;
  header->SetBGMode(0);
  //  header->SetRadius(0.4);
  header->SetRparam(jetR); 
  //header->SetGhostEtaMax(2);
  //header->SetGhostArea(0.05);
  header->SetAlgorithm(2); // antikt_algorithm = 2, kt = 0 (see fastjet/fastjet/JetDefinition.hh

  AliFastJetFinder *FastJet = new AliFastJetFinder;
  FastJet->SetJetHeader(header);

  AliAODEvent *aod = new AliAODEvent();
  aod->CreateStdContent();
  FastJet->ConnectAOD(aod);

  AliJetCalTrkEvent JetFinderEvent(0,1);
  TClonesArray *plist = new TClonesArray("TParticle");
  TClonesArray aliplist("AliMCParticle",1000);

  for (Int_t iEvent = 0; iEvent < nEvent; iEvent++) {

    TProcessID::SetObjectCount(0); // Needed for TRefs in AliCalTrkTrack and AliAODJet

    pythia->GenerateEvent();
    
    hNEvent->Fill(0.5);

    pythia->GetParticles(plist);

    aliplist.Clear();
    JetFinderEvent.Clear();

    Int_t n_part = plist->GetEntries();
    for (Int_t i_part = 0; i_part < n_part; i_part++) {
      part=(TParticle*) plist->At(i_part);

      if (abs(part->GetPdgCode()) == 421) {
	hPtD->Fill(part->Pt());
      }
      if (abs(part->GetPdgCode()) != 421 && part->GetStatusCode() >= 10)  // Not a final state particle (Keep Dzeros, if any)
	continue;

      if (part->GetMother() < 8 && fabs(plist->At(part->GetMother())->GetPdgCode()) == 421) // reject D0 daughters to prevent double counting
	continue;
      new (aliplist[i_part]) AliMCParticle(part);

      if (abs(part->GetPdgCode()) == 211) {
	hPtPion->Fill(part->Pt());
      }
      //else if (abs(part->GetPdgCode()) == 421) {

      //}
      // Only use charged tracks?

      JetFinderEvent.AddCalTrkTrackKine((AliMCParticle*)aliplist[i_part],1,1);
    }

    aod->ClearStd();
    FastJet->Reset();
    FastJet->SetCalTrkEvent(JetFinderEvent);
    FastJet->ProcessEvent();
    for (Int_t iJet = 0; iJet < aod->GetNJets(); iJet++) {
      jet = aod->GetJet(iJet);
      //cout << "\t jet " << iJet << " pt " << jet->Pt() << " eta " << jet->Eta() << " phi " << jet->Phi() << endl; 
      if (TMath::Abs(jet->Eta()) < eta_jet_max) {
	hJetPtEtaPhi->Fill(jet->Pt(),jet->Eta(),jet->Phi());
	// loop over constituents
	Int_t ntrk = jet->GetRefTracks()->GetEntries();
	for (Int_t itrk = 0; itrk < ntrk; itrk++) {
	  AliMCParticle *trk = dynamic_cast<AliMCParticle*>(jet->GetTrack(itrk));
	  hPtJetPtCh->Fill(jet->Pt(), trk->Pt());

	  if (abs(trk->PdgCode()) == 211) {
	    hPtJetPtPion->Fill(jet->Pt(), trk->Pt());
	  }
	  else if (abs(trk->PdgCode()) == 2212) {
	    hPtJetPtProton->Fill(jet->Pt(), trk->Pt());
	  }
	  else if (abs(trk->PdgCode()) == 321) {
	    hPtJetPtKaon->Fill(jet->Pt(), trk->Pt());
	  }
	  else if (abs(trk->PdgCode()) == 421) {
	    hPtJetPtD->Fill(jet->Pt(), trk->Pt());
	  }
	}
      }
    }
  }

  hXSec->Fill(0.5,pythia->GetPARI(1));

  fout->Write();
}

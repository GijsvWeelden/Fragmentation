#include <iostream>
#include "Pythia8/Pythia.h"
#include "TFile.h"
#include "TH1F.h"
#include "TH2F.h"

#define nEvents 20000

using namespace Pythia8;

int main(int /*argc*/, char** /*argv*/)
{


//PYTHIA SETTINGS

	TString name;

	int mecorr=1;

	Float_t ptHatMin=-1; //80;
	Float_t ptHatMax=-1; //100;

	// Generator. Process selection. LHC initialization. Histogram.
	Pythia pythia;
	pythia.readString("Beams:idA = 2212"); //beam 1 proton
	pythia.readString("Beams:idB = 2212"); //beam 2 proton
	pythia.readString("Beams:eCM = 13000.");
	pythia.readString("Tune:pp = 5");  //tune 1-13    5=defaulr TUNE4C,  6=Tune 4Cx, 7=ATLAS MB Tune A2-CTEQ6L1

	pythia.readString("Random:setSeed = on");
	pythia.readString("Random:seed = 0");

	pythia.readString("HardQCD:all = on");
	if(ptHatMin>0 && ptHatMax >0){     
  	name = Form("PhaseSpace:pTHatMin = %f", (Float_t) ptHatMin);
	pythia.readString(name.Data()); 
	name = Form("PhaseSpace:pTHatMax = %f", (Float_t) ptHatMax);
	pythia.readString(name.Data()); 
	}
   
	pythia.readString("310:mayDecay  = off"); //K0s
	pythia.readString("3122:mayDecay = off"); //labda0
	pythia.readString("3112:mayDecay = off"); //sigma-
	pythia.readString("3212:mayDecay = off"); //sigma0
	pythia.readString("3222:mayDecay = off"); //sigma+
	pythia.readString("3312:mayDecay = off"); //xi-
	pythia.readString("3322:mayDecay = off"); //xi+
	pythia.readString("3334:mayDecay = off"); //omega-

	//ME corrections
	//use of matrix corrections where available
	if(mecorr==0){ 
	pythia.readString("TimeShower:MECorrections=off");
	}
	pythia.init();

        // Output histograms
	TFile* outFile = new TFile("PythiaResult.root","RECREATE");
   TH2F *hEtaPt = new TH2F("hEtaPt","Pt vs Eta for all particles;#eta;p_{T} (GeV/c)",40,-2,2,50,0,10);


//Begin event loop
	for(int iEvent = 0; iEvent < nEvents; iEvent++)
	{
		double fourvec[4];

		//1st Step: Pythia + FastJet -> Probe Jet := Hardest Jet generated by Pythia.
		if(!pythia.next()) continue;
		
                Double_t ptSumPythia = 0;
                Int_t nPartPythia = 0;
                int nPart = pythia.event.size();
		for(int iPart = 0; iPart < nPart; iPart++) 
		{
                    const Particle &part = pythia.event[iPart];
			if(part.isFinal())
			{

				hEtaPt->Fill(part.eta(),part.pT());
                                nPartPythia++;
			}
		}
                
                if ((iEvent%1000)==0) 
                   cout << "Pythia event: " << nPartPythia << " particles" << endl;
	}
//End event loop

   
    	outFile->Write();
        cout << "Histos written to file " << outFile->GetName() << endl;
        outFile->Close();
}

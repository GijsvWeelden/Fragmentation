
void mergePythiaPtHardAll(){
  // This is used to merge the analysis-output from different 
  // data samples/pt_hard bins
  // in case the eventweight was set to xsection/ntrials already, this
  // is not needed. Both methods only work in case we do not mix different 
  // pt_hard bins, and do not have overlapping bins

  // From: $ALICE_ROOT/PWGJE/runJetSpectrumUnfolding

  gSystem->Load("libANALYSISalice");
  gSystem->Load("libCORRFW");
  gSystem->Load("libPWGTools");

  TGrid::Connect("alien://");

  Int_t debug = 1;

  const Int_t nBins = 8;

  // Skipping bin 'a', might be minbias; need to check
  const char *cFile[nBins] = {
    "alien:///alice/sim/LHC11a1b/126007/PWGJE/Jets_pp_MC/87_20120531-1413/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1c/126007/PWGJE/Jets_pp_MC/88_20120606-1240/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1d/126007/PWGJE/Jets_pp_MC/89_20120606-1240/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1e/126007/PWGJE/Jets_pp_MC/90_20120611-2303/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1f/126007/PWGJE/Jets_pp_MC/91_20120611-2303/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1g/126007/PWGJE/Jets_pp_MC/93_20120612-1136/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1i/126007/PWGJE/Jets_pp_MC/95_20120612-1136/AnalysisResults.root",
    "alien:///alice/sim/LHC11a1j/126007/PWGJE/Jets_pp_MC/96_20120612-1136/AnalysisResults.root"
  };

  TFile *fOut = new TFile("pythia_frag_merge_all.root","RECREATE");

  TFile *fIn[nBins] = {0};
  for(int ib = 0;ib < nBins;++ib){
    fIn[ib] = TFile::Open(cFile[ib]);
  }
  
  keyList = fIn[0]->GetListOfKeys();
  TIter keyIter(keyList); 
  while (key = (TKey*) keyIter()) {
    if (strcmp(key->GetClassName(),"TDirectoryFile") != 0) {// Expect only TDirectory file at top level
      cout << "Skipping: " << key->GetName() << " only merging TDirectoryFiles for now" << endl;
      continue;  
    }
    
    TDirectoryFile *inDir = (TDirectoryFile*) fIn[0]->Get(key->GetName());
    if (debug >= 1) 
      cout  << "inDir " << inDir << " " << key->GetName() << endl;
    
    TDirectoryFile *outDir = 0;
    fOut->cd();
    outDir = new TDirectoryFile(inDir->GetName(), inDir->GetTitle());

    dirKeyList = inDir->GetListOfKeys();
    TIter dirKeyIter(dirKeyList);
    while (dirKey = (TKey*) dirKeyIter()) {
      obj = inDir->Get(dirKey->GetName());
      if (obj->InheritsFrom("TList")) {
	TList *inList = (TList*) obj;
	if (debug >=1)
	  cout << "inList " << inList << " " << dirKey->GetName() << endl;
	TList *outList = 0;
	outList = new TList;
	outList->SetName(dirKey->GetName());
      

	// TODO: should get trials and xsec from JetServiceTask, not from analysis task output (event cuts!)

	for (Int_t ib = 0; ib < nBins; ib++) {
	  fIn[ib]->cd(outDir->GetName());
	  inList = (TList*) gDirectory->Get(dirKey->GetName());
	  if (debug >= 2) 
	    cout  << ib << ": " << inList->GetEntries() << endl;

	  TH1* hTrials = (TH1F*)inList->FindObject("fh1Trials");
	  TProfile* hXsec = (TProfile*)inList->FindObject("fh1Xsec");
	  if (hTrials == 0 || hXsec == 0) {
	    cout << "WARNING: no nTrials or Xsec histo; skipping" << endl;
	    break;
	  }
	  Double_t xsection = hXsec->GetBinContent(1);
	  Double_t nTrials = hTrials->Integral();
	  Double_t scaleFactor = xsection/nTrials;
	
	  TIter objIter(inList);
      
	  while ((obj = objIter())) {
	    if (debug >= 2)
	      cout << "Adding object (ib " << ib << " ) " << obj->GetName() << " type " << obj->Class()->GetName() << endl;

	    if(obj->InheritsFrom("TH1")){
	      if (debug >= 3)
		cout << "Case TH1" << endl;
	      TH1 *h1 = (TH1*)obj;
	      if(ib==0){
		h1Add = (TH1*)h1->Clone(h1->GetName());
		h1Add->Scale(scaleFactor);
		h1Add->SetDirectory(0);
		outList->Add(h1Add);
	      }
	      else{
		h1Add = (TH1*) outList->FindObject(h1->GetName());
		if (h1Add)
		  h1Add->Add(h1,scaleFactor);
		else 
		  cout << "Could not find histo: " << h1->GetName() << endl;
	      }
	    }
	    else if(obj->InheritsFrom("THnSparse")){
	      if (debug >= 3)
		cout << "Case THnSParse" << endl;
	      THnSparse *hn = (THnSparse*)obj;
	      if(ib==0){
		hnAdd = (THnSparse*)hn->Clone(hn->GetName());
		hnAdd->Scale(scaleFactor);
		outList->Add(hnAdd);
	      }
	      else{
		hnAdd = (THnSparse*) outList->FindObject(hn->GetName());
		if (hnAdd)
		  hnAdd->Add(hn,scaleFactor);
		else 
		  cout << "Could not find (sparse) histo: " << hn->GetName() << endl;
	      }
	    }
	    else{
	      if (ib==0) 
		cout << "Skipping " << obj->GetName() << " -- not a TH1 or THnSparse" << endl;
	    }
	  }
	  inList->Delete();
	  delete inList;
	}
	if (debug >= 1) 
	  cout << "Write outList" << endl;
	outDir->cd();
	if (debug >= 1)
	  cout << "outList has " << outList->GetEntries() << " entries" << endl;
	if (debug >= 2)
	  outList->Print();
	outList->Write(dirKey->GetName(),TObject::kSingleKey);
	outList->Delete();
	delete outList;
      
      }
      else {
	cout << "WARNING: skipping " << dirKey->GetName() << " in dir " << key->GetName() << " -- not a TList" << endl;
      }
    }
    
    if (debug >= 1)
      cout << "Write outDir" << endl;
    //fOut->cd();
    //outDir->Write();
  }
  if (debug >= 1) 
    cout << "Closing output file" << endl;
  fOut->cd();
  //lOut->Write(lOut->GetName(),TObject::kSingleKey);
  fOut->Close();
}

